#!/bin/bash


##
# Help commmands
##
function help(){
    echo ''
    echo '--------------------------------------------------------------------------------------------------'
    echo ' App Commands.                                                                                    '
    echo '--------------------------------------------------------------------------------------------------'
    echo ' app:dns:check                                                                                    '
    echo ' app:dns:logs                                                                                     '
    echo ' app:container:names                                                                             '
    echo ' app:proxy:check                                                                                  '
    echo ' app:proxy:logs                                                                                   '
    echo ' app:start                                                                                        '
    echo ' app:stop                                                                                         '
    echo ' app:update                                                                                       '
    echo ' build:containers      ./appcli cli:build:containers                                              '
    echo ' config                ./appcli cli:site:config {default.domain}                                  '
    echo ' config:find           ./appcli cli:site:config {default.domain} | jq ".[] | {string}"            '
    echo ' create                ./appcli cli:site:creation {default.domain}                                '
    echo ' domains:add           ./appcli cli:site:domains:add {default.domain}                             '
    echo ' domains:list          ./appcli cli:site:domains:list {default.domain}                            '
    echo ' domains:list:users    ./appcli cli:site:domains:list:user {default.domain}                       '
    echo ' domains:list:search   ./appcli cli:site:domains:list:search {search_string}                      '
    echo ' item:add              ./appcli cli:site:item:add {default.domain} {environment} {json_string}    '
    echo ' item:update           ./appcli cli:site:item:update {default.domain} {environment} {json_string} '
    echo ' item:remove           ./appcli cli:site:item:remove {default.domain} {environment} {json_string} '
    echo '--------------------------------------------------------------------------------------------------'
    echo ''
}

##
# Update host packages.
##
function updateDebian() {
 sudo apt-get update & sudo apt upgrade
}

function updateRel() {
  sudo yum update -y & sudo yum upgrade -y    
}

function updateApp() {
  composer self-update
  git pull origin main
}

##
# Manage dns
##
function dnsCheck(){
  sudo ss -ltnp | grep ':53'
  sudo ss -lunp | grep ':53'
  sudo docker ps --filter publish=53 -a --format 'table {{.ID}}\t{{.Names}}\t{{.Image}}\t{{.Ports}}'
}

function dnsDisable(){
  sudo systemctl unmask systemd-resolved || true
  sudo systemctl daemon-reload
  if ! sudo systemctl enable --now systemd-resolved; then
    sudo journalctl -u systemd-resolved -n 200 --no-pager || true
    exit 1
  fi

  STUB="/run/systemd/resolve/stub-resolv.conf"
  if [ ! -e "$STUB" ]; then
    sudo systemctl status systemd-resolved --no-pager || true
    exit 1
  fi
  
  sudo rm -f /etc/resolv.conf
  sudo ln -sf "$STUB" /etc/resolv.conf
  sudo netplan apply || true
  sudo systemctl status systemd-resolved --no-pager || true
  # resolvectl status || true
}

function dnsEnable(){
  sudo systemctl stop systemd-resolved
  sudo systemctl disable --now systemd-resolved
  sudo systemctl mask systemd-resolved
  sudo rm /etc/resolv.conf
  echo "nameserver 127.0.0.1" | sudo tee /etc/resolv.conf
  echo "nameserver 8.8.8.8" |  sudo tee /etc/resolv.conf
    if systemctl list-units --type=service --state=running | grep -Ei 'gdm|lightdm|sddm|lxdm|xdm|wayland' >/dev/null 2>&1; then
      sudo systemctl restart NetworkManager
    fi
}

function dnsLogs(){
  docker logs coredns 2>&1 | tail -n 200
}

##
# Debug 
##
function debugSSHCheck(){
  docker ps --filter "name=debug" --filter "status=running" -q >/dev/null && \
  docker exec debug ls -hal || \
  echo "container not running or exec failed"
}

function debugDNSCheck(){
  docker exec debug ping -c 1 coredns
  if (( $# >= 2 )); then
    docker exec debug cat /etc/resolv.conf
    docker exec debug dig $2 +trace
    docker exec debug dig @coredns $2 +noall +answer +stats
  else
    docker exec debug cat /etc/resolv.conf
    docker exec debug dig example.local +trace
    docker exec debug dig @coredns example.local +noall +answer +stats
  fi
}

function debugProxyCheck(){
  if (( $# >= 2 )); then
   echo ''
  else
   echo ''
  fi
}


##
# Manage proxy
##
function proxyCheck(){
  sudo ss -ltnp | grep ':443'
  sudo ss -ltnp | grep ':80'
  sudo docker ps --filter publish=80 -a --format 'table {{.ID}}\t{{.Names}}\t{{.Image}}\t{{.Ports}}'
}

function proxyLogs(){
  docker logs proxy_services 2>&1 | tail -n 200
}


##
# Helpers.
##
function deleteLogs(){
  for CID in $(docker ps -q); do
    LOG="/var/lib/docker/containers/$CID/$CID-json.log"
    if [ -f "$LOG" ]; then
      sudo truncate -s 0 "$LOG"
    fi
  done
}

##
# Docker helpers
##
function dockerPurge(){
  docker ps -aq | ForEach-Object { docker rm -f $_ }
  docker ps
}

function dockerContainersNames(){
   docker ps --format '{{.Names}}'
}

